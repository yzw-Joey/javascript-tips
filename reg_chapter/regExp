-i 不区分大小写
-g 所有
-m 匹配多行文本

[] 类
    -  [^] 表示非
    -  ^开头

重复出现
* 0/+∞  *?
? 0/1   
+ 1/+∞  +?  非贪婪，最小限度匹配

\s 空白 
\S 非空白
\w [0-9a-zA-Z_] 
\W [^0-9a-zA-Z_]
\d [0-9]
\D [^0-9]
|  or
.  换行符以外的任何字符
\n 换行符

捕获的引用：
1. 反向引用
    \1  \2  \3
    e.g. /<(\w+)>(.+)<\/\1>/    <div> lsdjaksldj </div>
    e.g. /<(\w+)>(.+)<\/\2>/    <div> lsdjaksldj </lsdjaksldj>

2. replace()
    'Class-Name'.replace(/([A-Z])/g, '"$1"')  =>   "C"lass-"N"ame
    
(?:)表示这个分组不需捕获！！


每个正则表达式被创建，都会进行正则编译，防止重复编译！（预编译）
字符串拼接，注意转译字符的使用（动态编译）

match() 
    pattern = new RegExp(...)
    var match = html.match(pattern)
    -> List[ 匹配完整结果, group1, group2, ... ]
    -> List[ 匹配结果1， 匹配结果2， 匹配结果3， ... ] 全局匹配 g
exec()
    pattern = new RegExp(...)
    var match
    while ( match = pattern.exec(html) !== null ){
        ...
    }
    -> List[ 匹配完整结果, group1, group2, ... ] 迭代执行

    